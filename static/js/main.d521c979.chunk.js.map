{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App3.js","actions.js","reducers.js","index.js"],"names":["Card","name","email","id","city","useState","trueId","setTrueId","className","alt","src","onClick","CardList","robots","cardArray","map","user","i","address","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchfield","onSearchChange","isPending","filteredrobors","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d521c979.chunk.js","sourcesContent":["import React, { useState} from 'react';\r\n\r\nfunction Card({ name, email, id, city }) {\r\n    const [trueId, setTrueId] = useState(id*4);\r\n    return (\r\n        <div className='bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-3'>\r\n            <img alt='123' src={`https://robohash.org/set_set4/${trueId}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n                <p>City: {city}</p>\r\n            </div>\r\n            <p>avatar id - {trueId}</p>\r\n            <button onClick={()=>setTrueId(trueId+1)}>increase</button>\r\n            <button onClick={()=>setTrueId(trueId-1)}>decrease</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardArray = robots.map((user, i) => {\r\n        return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} city={robots[i].address.city} />\r\n    });\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue '\r\n                type='search'\r\n                placeholder='search cats'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '3px solid black', height: '700px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops. Something went wrong..</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","//REDUX\r\n\r\nimport React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n// import { robots } from './robots';\r\nimport {requestRobots, setSearchField} from '../actions.js';\r\n\r\n\r\nconst mapStateToProps = state =>{ \r\n    return {\r\n        searchfield: state.searchRobots.searchfield,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n};\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    render() {\r\n        const {searchfield,onSearchChange,robots,isPending} = this.props;\r\n        const filteredrobors = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        return isPending ?\r\n            <h1>loading</h1> :\r\n            <div className='tc'>\r\n                <h1>Cat Friends~!</h1>\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredrobors} />\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n\r\n            </div>\r\n\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type:CHANGE_SEARCHFIELD,\r\n    payload:text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error =>dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","import {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchfield:'',\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCHFIELD:\r\n            return Object.assign({}, state, {searchfield: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialStateRobots ={\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App3.js';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\n// import App from './App'; \n// import reportWebVitals from './reportWebVitals';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}